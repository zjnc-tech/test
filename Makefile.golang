# SPDX-License-Identifier: Apache-2.0
# Copyright Authors of XenoView

#@ $(GO)@go二进制
GO = go

HAS_GO := $(shell command -v $(GO) 2> /dev/null)

# 环境中必须有golang执行下面的语句
ifdef HAS_GO 

CUR_GO_VERSION := $(shell go version)
#$(info Detected Golang: $(HAS_GO) ($(CUR_GO_VERSION)))

# Go版本确保最新
#@ $(GO_VERSION)@期望的Go版本
# renovate: datasource=golang-version depName=go
GO_VERSION := 1.22.0

#@ $(GOPATH)@GOPATH环境变量值
GOPATH ?= $(shell $(GO) env GOPATH)
ifeq "$(GOPATH)" ""
  $(error Please set the environment variable GOPATH before running `make`)
endif

#@ $(GOROOT)@GOROOT环境变量值
GOROOT ?= $(shell $(GO) env GOROOT)

#@ $(GOBIN)@GOBIN环境变量值
GOBIN ?= $(shell $(GO) env GOBIN)
ifeq "$(GOBIN)" ""
	GOBIN=${GOPATH}/bin
endif

#@ $(GOARCH)@GOARCH环境变量值
GOARCH ?= $(shell $(GO) env GOARCH)

#@ $(GOOS)@GOOS环境变量值
GOOS ?= $(shell $(GO) env GOOS)

#@ $(call get_root_go_module)@获取go.mod中的包名
define get_root_go_module
    $(shell $(GO) list -m)
endef

#@ $(GO_BUILD_FLAGS)@go build参数
GO_BUILD_FLAGS =

#@ $(GO_BUILD_LDFLAGS)@go build控制编译链接的参数
GO_BUILD_LDFLAGS =

#@ $(GO_TAGS_FLAGS)@go build的tags
GO_TAGS_FLAGS = 

#@ $(GO_TEST_FLAGS)@go test的参数
GO_TEST_FLAGS = -vet=all

#@ $(GOTEST_COVER_OPTS)@go test有关覆盖率的参数
GOTEST_COVER_OPTS ?= -coverprofile=output/coverage.out

#@ $(TESTPKGS)@go test要测试的包
TESTPKGS ?= ./...

#@ $(GO_CLEAN_FLAGS)@go clean参数
GO_CLEAN_FLAGS = 

# 指定version.go的包路径和变量名，用于在go build时将FULL_BUILD_VERSION注入
CODE_VERSION_DIR ?= /pkg/util.Version

GO_BUILD_LDFLAGS += -X "$(ROOT_GO_MODULE)$(CODE_VERSION_DIR)=$(FULL_BUILD_VERSION)"

# 处理go test覆盖率报告的输出
# 默认情况直接打印，如果安装了tparse则用tparse输出
# tparse是一个解析覆盖率报告的工具https://github.com/mfridman/tparse
#@ $(GO_TEST) | $(GOTEST_FORMATTER)@go test结果的格式化工具
GOTEST_FORMATTER ?= cat
ifneq ($(shell command -v tparse),)
	GOTEST_COVER_OPTS += -json
	GOTEST_FORMATTER = tparse -progress
endif

#@ $(GO_BUILD)@不带cgo的go build命令
GO_BUILD = CGO_ENABLED=0 $(GO) build

# Support CGO cross-compiling for amd64 and arm64 targets
CGO_CC =
CROSS_ARCH =
ifneq ($(GOARCH),$(NATIVE_ARCH))
    CROSS_ARCH = $(GOARCH)
endif
ifeq ($(CROSS_ARCH),arm64)
    CGO_CC = CC=aarch64-linux-gnu-gcc
else ifeq ($(CROSS_ARCH),amd64)
    CGO_CC = CC=x86_64-linux-gnu-gcc
endif

#@ $(GO_BUILD_WITH_CGO)@带cgo的go build命令
GO_BUILD_WITH_CGO = $(call ensure_go_flags) CGO_ENABLED=1 $(CGO_CC) $(GO) build

GO_BUILD_FLAGS += -ldflags '$(GO_BUILD_LDFLAGS) $(EXTRA_GO_BUILD_LDFLAGS)' -tags '$(call join-with-comma,$(GO_TAGS_FLAGS))' $(EXTRA_GO_BUILD_FLAGS)
GO_TEST_FLAGS += -tags=$(call join-with-comma,$(GO_TAGS_FLAGS))
GO_BUILD += $(GO_BUILD_FLAGS)
GO_BUILD_WITH_CGO += $(GO_BUILD_FLAGS)

#@ $(GO_TEST)@go test命令
GO_TEST = CGO_ENABLED=0 $(GO) test $(GO_TEST_FLAGS) $(GOTEST_COVER_OPTS) $(TESTPKGS)

#@ $(GO_CLEAN)@go clean命令
GO_CLEAN = $(GO) clean $(GO_CLEAN_FLAGS)

#@ $(GO_VET)@go vet命令
GO_VET = $(GO) vet

#@ $(GO_LIST)@go list命令
GO_LIST = $(GO) list

#@ $(call ensure_go_flags)@用于根据环境变量刷新go flags 在调用所有go xxx之前必须先调用这个函数
define ensure_go_flags
    $(eval GO_BUILD_LDFLAGS += $(if $(NOSTRIP),,-s -w))
    $(eval ROOT_GO_MODULE = $(shell $(GO) list -m))
    $(eval GO_BUILD_FLAGS += $(if $(GO_MOD_VENDOR),-mod=vendor,))
    $(eval GO_BUILD_FLAGS += $(if $(GO_MOD_VENDOR),-mod=vendor,))
    $(eval GO_CLEAN_FLAGS += $(if $(GO_MOD_VENDOR),-mod=vendor,))

    $(eval GO_BUILD_FLAGS += $(if $(RACE),-race,))
    $(eval GO_TEST_FLAGS += $(if $(RACE),-race,))
    $(eval GO_BUILD_FLAGS += $(if $(NOOPT),-gcflags="all=-N -l",))
    $(eval GOTEST_COVER_OPTS += $(if $(RACE),-covermode=atomic,-covermode=count))
endef

#@ $(GOLANGCILINT_WANT_VERSION)@最新golangci-lint版本
# renovate: datasource=docker depName=golangci/golangci-lint
GOLANGCILINT_WANT_VERSION = v1.61.0
GOLANGCILINT_IMAGE_SHA = sha256:e47065d755ca0afeac9df866d1dabdc99f439653a43fe234e05f50d9c36b6b90
#@ $(GOLANGCILINT_VERSION)@本地golangci-lint版本
GOLANGCILINT_VERSION = $(shell golangci-lint version --format short 2>/dev/null)
GOLANGCI_LINT_ARGS = --timeout=10m
##@ Golang
.PHONY: golangci-lint
golangci-lint: ##Run golangci-lint
ifneq (,$(findstring $(GOLANGCILINT_WANT_VERSION:v%=%),$(GOLANGCILINT_VERSION)))
	golangci-lint run $(GOLANGCI_LINT_ARGS)
else    
	@echo "建议本地安装$(GOLANGCILINT_WANT_VERSION)版本的golangci-lint, 命令：(go install github.com/golangci/golangci-lint/cmd/golangci-lint@$(GOLANGCILINT_WANT_VERSION)) 现在将使用docker运行" && $(CONTAINER_ENGINE) run --rm -v `pwd`:/app -w /app docker.io/golangci/golangci-lint:$(GOLANGCILINT_WANT_VERSION)@$(GOLANGCILINT_IMAGE_SHA) golangci-lint run $(GOLANGCI_LINT_ARGS)
endif

.PHONY: golangci-lint-fix
golangci-lint-fix: ##Run golangci-lint to automatically fix warnings
	$(QUIET)$(MAKE) golangci-lint GOLANGCI_LINT_ARGS+=" --fix"
endif

godoc-run: ##运行godoc
	@if command -v godoc > /dev/null; then echo "GoDoc地址: localhost:6060";godoc -http=":6060"; else echo "请先安装godoc: go install golang.org/x/tools/cmd/godoc@latest"; fi

.PHONY: check-go
check-go: ##检查go二进制是否存在
	@which $(GO) || (echo -e "$(BOLD_COLOR_RED)Error: $(GO) not found. Please install Golang and try again.$(COLOR_RESET)" && exit 1)

